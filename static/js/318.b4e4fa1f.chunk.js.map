{"version":3,"file":"static/js/318.b4e4fa1f.chunk.js","mappings":"mPAWaA,EAAW,WACtB,IAAMC,GAAiBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC7BC,GAAWC,EAAAA,EAAAA,MAEXC,GAAiBJ,EAAAA,EAAAA,IAAYK,EAAAA,IAMnC,OAJAC,EAAAA,EAAAA,YAAU,WACRJ,GAASK,EAAAA,EAAAA,MACV,GAAE,CAACL,KAGF,+BACE,wBACGH,GACC,gBAAKS,UAAU,SAAf,UACE,SAAC,KAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,UACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,MAIbZ,EAAea,KAAI,YAA2B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,OAC9B,OACE,0BACGF,EADH,KACWE,GACT,mBAAiBC,KAAK,SAASC,QAAS,kBA5BjC,SAAAH,GAAE,OAAIjB,GAASqB,EAAAA,EAAAA,IAAoBJ,GAAjC,CA4BqCK,CAAaL,EAAnB,EAAxC,mBAAaA,KAFNA,EAOZ,OAKV,E,oBC9CYM,EAAS,WACpB,IAAMC,GAAc1B,EAAAA,EAAAA,IAAY2B,EAAAA,IAC1BzB,GAAWC,EAAAA,EAAAA,MACXyB,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,mBAAOC,QAASF,EAAhB,iCAEE,kBACEP,KAAK,OACLU,MAAOL,EACPR,KAAK,SACLc,SAAU,SAAAC,GAAC,OAAI/B,GAASgC,EAAAA,EAAAA,IAASD,EAAEE,OAAOJ,OAA/B,EACXZ,GAAIS,QAKb,E,wCCXYQ,EAAO,WAClB,IAAMC,GAAWrC,EAAAA,EAAAA,IAAYsC,EAAAA,IACvBpC,GAAWC,EAAAA,EAAAA,MAiBjB,OACE,iBAAMoC,SAhBa,SAAAN,GACnBA,EAAEO,iBACF,IAAMC,EAAOR,EAAES,cACTC,EAAO,IAAIC,SAASH,GACNJ,EAASQ,MAAK,SAAAC,GAAI,OAAIA,EAAK5B,OAASyB,EAAKI,IAAI,OAA3B,IAEpCC,MAAM,GAAD,OAAIL,EAAKI,IAAI,QAAb,4BAEL7C,GACE+C,EAAAA,EAAAA,IAAiB,CAAE/B,KAAMyB,EAAKI,IAAI,QAAS3B,OAAQuB,EAAKI,IAAI,aAE9DN,EAAKS,QAER,EAGC,UACE,UAACC,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,WAAY,WACZ,kBAAmB,CAAEC,EAAG,IAJ5B,WAOE,SAACC,EAAA,EAAD,CACEC,WAAW,oBACXtC,GAAG,2BACHuC,MAAM,OACNrC,KAAK,OACLH,KAAK,OACLyC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEV,SAACL,EAAA,EAAD,CACEC,WAAW,uBACXtC,GAAG,qCACHuC,MAAM,SACNrC,KAAK,MACLH,KAAK,SACLyC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEV,SAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,KAAK,QACLZ,GAAI,CACF3C,OAAQ,IAEVY,KAAK,SACL4C,SAAS,SAACC,EAAA,EAAD,IAPX,qBAcP,ECxDD,EAdmB,WACjB,OACE,iCACE,uCACA,SAAC9B,EAAD,KAEA,sCACA,SAACX,EAAD,KACA,SAAC3B,EAAD,MAIL,C","sources":["components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/Form/Form.jsx","pages/PhoneBook.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setfilterContacts, setIsLoading } from 'redux/contacts/contactsSlice';\nimport PropTypes from 'prop-types';\nimport {\n  getContactsThunk,\n  deleteContactsThunk,\n} from 'redux/contacts/contacts.thunk';\n\nimport { BallTriangle } from 'react-loader-spinner';\n\nexport const Contacts = () => {\n  const contactLoading = useSelector(setIsLoading);\n  const dispatch = useDispatch();\n  const handleDelete = id => dispatch(deleteContactsThunk(id));\n  const filterContacts = useSelector(setfilterContacts);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ul>\n        {contactLoading ? (\n          <div className=\"loader\">\n            <BallTriangle\n              height={100}\n              width={100}\n              radius={5}\n              color=\"#4fa94d\"\n              ariaLabel=\"ball-triangle-loading\"\n              wrapperClass={{}}\n              wrapperStyle=\"\"\n              visible={true}\n            />\n          </div>\n        ) : (\n          filterContacts.map(({ name, id, number }) => {\n            return (\n              <li key={id}>\n                {name}: {number}\n                <button key={id} type=\"button\" onClick={() => handleDelete(id)}>\n                  delete\n                </button>\n              </li>\n            );\n          })\n        )}\n      </ul>\n    </>\n  );\n};\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      phone: PropTypes.string,\n    })\n  ),\n};\n","import { nanoid } from 'nanoid';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilterValue, setSerch } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const filterValue = useSelector(setFilterValue);\n  const dispatch = useDispatch();\n  const filterID = nanoid();\n  return (\n    <>\n      <label htmlFor={filterID}>\n        Find contac by name\n        <input\n          type=\"text\"\n          value={filterValue}\n          name=\"filter\"\n          onChange={e => dispatch(setSerch(e.target.value))}\n          id={filterID}\n        />\n      </label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport { setContactsValue } from 'redux/contacts/contactsSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContactsThunk } from 'redux/contacts/contacts.thunk';\nimport { Box, TextField } from '@mui/material';\nimport Button from '@mui/material/Button';\n\nimport SendIcon from '@mui/icons-material/Send';\n\n\n\nexport const Form = () => {\n  const contacts = useSelector(setContactsValue);\n  const dispatch = useDispatch();\n\n  const handelSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const data = new FormData(form);\n    const includeName = contacts.find(user => user.name === data.get('name'));\n    if (includeName) {\n      alert(`${data.get('name')} is already in contacs`);\n    } else {\n      dispatch(\n        addContactsThunk({ name: data.get('name'), number: data.get('number') })\n      );\n      form.reset();\n    }\n  };\n\n  return (\n    <form onSubmit={handelSubmit}>\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'baseline',\n          '& > :not(style)': { m: 1 },\n        }}\n      >\n        <TextField\n          helperText=\"Please enter name\"\n          id=\"demo-helper-text-aligned\"\n          label=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <TextField\n          helperText=\"Please enter number \"\n          id=\"demo-helper-text-aligned-no-helper\"\n          label=\"Number\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          sx={{\n            height: 56,\n          }}\n          type=\"submit\"\n          endIcon={<SendIcon />}\n        >\n          ADD\n        </Button>\n      </Box>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n","import { Contacts } from \"components/Contacts/Contacts\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { Form } from \"components/Form/Form\";\n\n\n const PhoneBook = () => {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <Form />\n      \n      <h2>Contacts</h2>\n      <Filter />\n      <Contacts />\n    </>\n  );\n\n};\n\nexport default PhoneBook;"],"names":["Contacts","contactLoading","useSelector","setIsLoading","dispatch","useDispatch","filterContacts","setfilterContacts","useEffect","getContactsThunk","className","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","map","name","id","number","type","onClick","deleteContactsThunk","handleDelete","Filter","filterValue","setFilterValue","filterID","nanoid","htmlFor","value","onChange","e","setSerch","target","Form","contacts","setContactsValue","onSubmit","preventDefault","form","currentTarget","data","FormData","find","user","get","alert","addContactsThunk","reset","Box","sx","display","alignItems","m","TextField","helperText","label","pattern","title","required","Button","variant","size","endIcon","Send"],"sourceRoot":""}