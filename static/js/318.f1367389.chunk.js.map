{"version":3,"file":"static/js/318.f1367389.chunk.js","mappings":"kPAWaA,EAAW,WACtB,IAAMC,GAAiBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC7BC,GAAWC,EAAAA,EAAAA,MAEXC,GAAiBJ,EAAAA,EAAAA,IAAYK,EAAAA,IAMnC,OAJAC,EAAAA,EAAAA,YAAU,WACRJ,GAASK,EAAAA,EAAAA,MACV,GAAE,CAACL,KAGF,+BACE,wBACGH,GACC,gBAAKS,UAAU,SAAf,UACE,SAAC,KAAD,CACEC,OAAQ,IACRC,MAAO,IACPC,OAAQ,EACRC,MAAM,UACNC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,MAIbZ,EAAea,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAC9B,OACE,0BACGF,EADH,KACWE,GACT,mBAAiBC,KAAK,SAASC,QAAS,kBA5BjC,SAAAH,GAAE,OAAIjB,GAASqB,EAAAA,EAAAA,IAAoBJ,GAAjC,CA4BqCK,CAAaL,EAAnB,EAAxC,mBAAaA,KAFNA,EAOZ,OAKV,E,oBC9CYM,EAAS,WACpB,IAAMC,GAAc1B,EAAAA,EAAAA,IAAY2B,EAAAA,IAC1BzB,GAAWC,EAAAA,EAAAA,MACXyB,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,mBAAOC,QAASF,EAAhB,iCAEE,kBACEP,KAAK,OACLU,MAAOL,EACPR,KAAK,SACLc,SAAU,SAAAC,GAAC,OAAI/B,GAASgC,EAAAA,EAAAA,IAASD,EAAEE,OAAOJ,OAA/B,EACXZ,GAAIS,QAKb,E,UCjBYQ,EAAO,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOnB,EAAP,KAAaoB,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KACMC,GAAWzC,EAAAA,EAAAA,IAAY0C,EAAAA,IACvBxC,GAAWC,EAAAA,EAAAA,MAQXwC,EAAe,SAAAV,GACnB,MAAwBA,EAAEE,OAAlBjB,EAAR,EAAQA,KAAMa,EAAd,EAAcA,MACd,OAAQb,GACN,IAAK,OACHoB,EAAQP,GACR,MAEF,IAAK,SACHS,EAAUT,GACV,MACF,QACE,OAEL,EAiBKa,GAAcf,EAAAA,EAAAA,MACdgB,GAAahB,EAAAA,EAAAA,MACnB,OACE,kBAAMiB,SAba,SAAAb,GAEnB,IA7BwBc,EAEH,EA0BrBd,EAAEe,iBACkBP,EAASQ,MAAK,SAAAC,GAAI,OAAIA,EAAKhC,OAASA,CAAlB,IAEpCiC,MAAM,GAAD,OAAIjC,EAAJ,4BA/BiB6B,EAEmB,CAC3C7B,MADqB,EA+Ba,CAAEA,KAAAA,EAAMqB,OAAAA,IA/BnBrB,KAEvBqB,OAFoB,EAASA,QAFMrC,GAASkD,EAAAA,EAAAA,IAAiBL,IAuB7DT,EAAQ,IACRE,EAAU,IAYX,EAIC,WACE,mBAAOV,QAASc,EAAhB,kBAEE,kBACEzB,GAAIyB,EACJZ,SAAUW,EACVZ,MAAOb,EACPG,KAAK,OACLH,KAAK,OACLmC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOzB,QAASe,EAAhB,oBAEE,kBACE1B,GAAI0B,EACJb,SAAUW,EACVZ,MAAOQ,EACPlB,KAAK,MACLH,KAAK,SACLmC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQlC,KAAK,SAAb,0BAGL,EChED,EAbmB,WACjB,OACE,iCACE,uCACA,SAACe,EAAD,KACA,sCACA,SAACX,EAAD,KACA,SAAC3B,EAAD,MAIL,C","sources":["components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/Form/Form.jsx","pages/PhoneBook.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setfilterContacts, setIsLoading } from 'redux/contacts/contactsSlice';\nimport PropTypes from 'prop-types';\nimport {\n  getContactsThunk,\n  deleteContactsThunk,\n} from 'redux/contacts/contacts.thunk';\n\nimport { BallTriangle } from 'react-loader-spinner';\n\nexport const Contacts = () => {\n  const contactLoading = useSelector(setIsLoading);\n  const dispatch = useDispatch();\n  const handleDelete = id => dispatch(deleteContactsThunk(id));\n  const filterContacts = useSelector(setfilterContacts);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ul>\n        {contactLoading ? (\n          <div className=\"loader\">\n            <BallTriangle\n              height={100}\n              width={100}\n              radius={5}\n              color=\"#4fa94d\"\n              ariaLabel=\"ball-triangle-loading\"\n              wrapperClass={{}}\n              wrapperStyle=\"\"\n              visible={true}\n            />\n          </div>\n        ) : (\n          filterContacts.map(({ name, id, phone }) => {\n            return (\n              <li key={id}>\n                {name}: {phone}\n                <button key={id} type=\"button\" onClick={() => handleDelete(id)}>\n                  delete\n                </button>\n              </li>\n            );\n          })\n        )}\n      </ul>\n    </>\n  );\n};\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      phone: PropTypes.string,\n    })\n  ),\n};\n","import { nanoid } from 'nanoid';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilterValue, setSerch } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const filterValue = useSelector(setFilterValue);\n  const dispatch = useDispatch();\n  const filterID = nanoid();\n  return (\n    <>\n      <label htmlFor={filterID}>\n        Find contac by name\n        <input\n          type=\"text\"\n          value={filterValue}\n          name=\"filter\"\n          onChange={e => dispatch(setSerch(e.target.value))}\n          id={filterID}\n        />\n      </label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport { setContactsValue } from 'redux/contacts/contactsSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContactsThunk } from 'redux/contacts/contacts.thunk';\n\nexport const Form = () => {\n  const [name, setName] = useState('');\n  const [number, setnumber] = useState('');\n  const contacts = useSelector(setContactsValue);\n  const dispatch = useDispatch();\n  const addContactToState = contact => dispatch(addContactsThunk(contact));\n\n  const createContact = ({ name, number }) => ({\n    name,\n    number,\n  });\n\n  const handelChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setnumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setnumber('');\n  };\n\n  const handelSubmit = e => {\n    e.preventDefault();\n    const includeName = contacts.find(user => user.name === name);\n    if (includeName) {\n      alert(`${name} is already in contacs`);\n    } else {\n      addContactToState(createContact({ name, number }));\n      reset();\n    }\n  };\n  const inputNameId = nanoid();\n  const inputTelId = nanoid();\n  return (\n    <form onSubmit={handelSubmit}>\n      <label htmlFor={inputNameId}>\n        Name\n        <input\n          id={inputNameId}\n          onChange={handelChange}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label htmlFor={inputTelId}>\n        Number\n        <input\n          id={inputTelId}\n          onChange={handelChange}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contac</button>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n","import { Contacts } from \"components/Contacts/Contacts\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { Form } from \"components/Form/Form\";\n\n\n const PhoneBook = () => {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <Contacts />\n    </>\n  );\n\n};\n\nexport default PhoneBook;"],"names":["Contacts","contactLoading","useSelector","setIsLoading","dispatch","useDispatch","filterContacts","setfilterContacts","useEffect","getContactsThunk","className","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","map","name","id","phone","type","onClick","deleteContactsThunk","handleDelete","Filter","filterValue","setFilterValue","filterID","nanoid","htmlFor","value","onChange","e","setSerch","target","Form","useState","setName","number","setnumber","contacts","setContactsValue","handelChange","inputNameId","inputTelId","onSubmit","contact","preventDefault","find","user","alert","addContactsThunk","pattern","title","required"],"sourceRoot":""}